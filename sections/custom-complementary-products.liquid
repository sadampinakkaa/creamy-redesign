<style>
  .custom-complementary-products .card__media .media {
    height: 100%;
}
.custom-complementary-products .complementary-products__container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    text-align: center;
}
.custom-complementary-products h2.h3.accordion__title {
    text-align: center;
    font-weight: 400;
    font-size: 18.9px;
}

.custom-complementary-products .summary__title {
    text-align: center;
    font-weight: 400;
}

.custom-complementary-products .contains-card {
    background: #FAF8F5;
    align-items: flex-start;
    justify-content: center;
    gap: 15px;
    padding: 30px 0;
}
.custom-complementary-products .card.card--standard.card--media {
    min-height: 383px;
}
.custom-complementary-products .card-wrapper.product-card-wrapper {
    background: #fff;
}
.custom-complementary-products .card__badge.bottom.left {
    align-self: flex-start;
    grid-row-start: 1;
    border-radius: 0;
}

.custom-complementary-products .card__badge.bottom.left span {
    border-radius: 4px;
    padding: 10px 15px;
}
.custom-complementary-products button.quick-add__submit.button.button--full-width.button--secondary {
    border: 1px solid #2D2D2F;
    color: #2D2D2F;
}
.complementary-slide.complementary-slide--standard{
    min-width: 275px;
}
.custom-lg-hide {
    display:none;
} 
@media (max-width: 1024px) {
  .custom-complementary-products {
    display: none !important;
  }
  .custom-lg-hide {
    display:flex;
  } 
}
</style> 

<section id="complementary-products-section-{{ section.id }}" class="complementary-products-section custom-complementary-products lg-hidden">
  <product-recommendations
    class="complementary-products quick-add-hidden{% if section.settings.make_collapsible_row %} is-accordion{% endif %}{% if section.settings.enable_quick_add %} complementary-products-contains-quick-add{% endif %}"
    data-url="{{ routes.product_recommendations_url }}?limit={{ section.settings.product_list_limit }}&intent=complementary"
    data-section-id="{{ section.id }}"
    data-product-id="{{ product.id }}"
  >
    {%- if recommendations.performed and recommendations.products_count > 0 -%}
      <aside
        aria-label="Complementary products"
        {% if section.settings.make_collapsible_row %}
          class="product__accordion accordion"
        {% endif %}
      >
        <div class="complementary-products__container">
          {%- if section.settings.make_collapsible_row -%}
            <details id="Details-{{ section.id }}" open>
              <summary>
          {%- endif %}
          <div class="summary__title">
            {%- if section.settings.make_collapsible_row -%}
              {% render 'icon-accordion', icon: section.settings.icon %}
              <h2 class="h4 accordion__title">{{ section.settings.block_heading }}</h2>
            {%- else -%}
              <h2 class="h3 accordion__title">{{ section.settings.block_heading }}</h2>
            {%- endif -%}
          </div>
          {%- if section.settings.make_collapsible_row -%}
            {{- 'icon-caret.svg' | inline_asset_content -}}
            </summary>
          {%- endif -%}
          <slideshow-component class="slider-mobile-gutter">
            {%- assign number_of_slides = recommendations.products_count
              | plus: 0.0
              | divided_by: section.settings.products_per_page
              | ceil
            -%}
            <div
              id="Slider-{{ section.id }}"
              class="contains-card contains-card--product complementary-slider grid grid--6-col slider slider--everywhere"
              role="list"
              {% if number_of_slides > 1 %}
                aria-label="Slideshow"
              {% endif %}
            >
              {%- for product in recommendations.products
                limit: section.settings.products_per_page
                offset: continue
              -%}
                <div class="complementary-slide complementary-slide--{{ settings.card_style }}"
                  tabindex="-1"
                  role="group"
                  {% if number_of_slides > 1 %}
                    aria-roledescription="Slide"
                    aria-label="{{ forloop.index }} of {{ forloop.length }}"
                  {% endif %}
                >
                  {%- assign color_label_list = 'general.label.color' | t | replace: ', ', ',' | downcase | split: ',' -%}
                  {%- assign color_white_label = 'general.label.white' | t | downcase -%}
                  {%- assign quick_buy_icon_name = 'quick-buy-' | append: settings.cart_icon | replace: '_', '-' -%}

                  {%- if product.url contains '?' -%}
                    {%- assign product_url_contains_query = true -%}
                  {%- else -%}
                    {%- assign product_url_contains_query = false -%}
                  {%- endif -%}

                  <product-item class="product-item {% unless product.available %}product-item--sold-out{% endunless %}">
                    {%- capture product_labels -%}
                      {%- for tag in product.tags -%}
                        {%- if tag contains '__label' -%}
                          <span class="label label--custom{% if tag contains '__label2' %}2{% endif %}">{{ tag | split: ':' | last }}</span>
                        {%- endif -%}
                      {%- endfor -%}

                      {%- unless product.available -%}
                        <span class="label label--subdued">Sold out</span>
                      {%- endunless -%}

                      {%- assign cheapest_variant = product.variants | sort: 'price' | first -%}

                      {%- if settings.show_discount and product.available and product.price < product.compare_at_price and cheapest_variant.compare_at_price != blank -%}
                        {%- if settings.discount_mode == 'percentage' -%}
                          {%- assign savings = product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round | append: '%' -%}
                        {%- else -%}
                          {%- capture savings -%}{{ product.compare_at_price | minus: product.price | money }}{%- endcapture -%}
                        {%- endif -%}

                        <span class="label label--highlight">{{ 'collection.product.discount_html' | t: savings: savings }}</span>
                      {%- endif -%}
                    {%- endcapture -%}

                    <div class="product-item__image-wrapper {% if settings.show_secondary_image and product.media.size > 1 %}product-item__image-wrapper--multiple{% endif %}">
                      {%- if product_labels != blank -%}
                        <div class="product-item__label-list label-list">
                          {{- product_labels -}}
                        </div>
                      {%- endif -%}

                      <a
                        href="{{ product.url }}"
                        data-instant
                        class="product-item__aspect-ratio aspect-ratio {% if settings.product_image_size != 'natural' %}aspect-ratio--{{ settings.product_image_size }}{% endif %}"
                        style="padding-bottom: {{ 100.0 | divided_by: product.featured_media.preview_image.aspect_ratio }}%; --aspect-ratio: {{ product.featured_media.preview_image.aspect_ratio }}"
                      >
                        {%- if product.featured_media -%}
                          {{
                            product.featured_media
                            | image_url: width: product.featured_media.width
                            | image_tag:
                              loading: 'lazy',
                              sizes: '275px',
                              widths: '200,300,400,500,600',
                              class: 'product-item__primary-image',
                              data-media-id: product.featured_media.id
                          }}
                        {%- endif -%}

                        {%- if settings.show_secondary_image and product.media.size > 1 -%}
                          {%- assign next_media = product.media[product.featured_media.position] | default: product.media[1] -%}
                          {{-
                            next_media
                            | image_url: width: next_media.width
                            | image_tag:
                              loading: 'lazy',
                              sizes: '275px',
                              widths: '200,300,400,500,600',
                              class: 'product-item__secondary-image'
                          -}}
                        {%- endif -%}
                      </a>
                    </div>

                    <div class="product-item__info">
                      {%- if product_labels != blank -%}
                        <div class="product-item__label-list label-list CustomPosiitonBottom">
                          {{- product_labels -}}
                        </div>
                      {%- endif -%}

                      <div class="product-item-meta">
                        {%- if settings.show_vendor -%}
                          {%- assign vendor_handle = product.vendor | handle -%}
                          {%- assign collection_for_vendor = collections[vendor_handle] -%}

                          {%- unless collection_for_vendor.empty? -%}
                            <a class="product-item-meta__vendor heading heading--xsmall" href="{{ collection_for_vendor.url }}" data-instant>
                              {{- product.vendor -}}
                            </a>
                          {%- else -%}
                            <a class="product-item-meta__vendor heading heading--xsmall" href="{{ product.vendor | url_for_vendor }}" data-instant>
                              {{- product.vendor -}}
                            </a>
                          {%- endunless -%}
                        {%- endif -%}

                        {% liquid
                          assign compared_product_title = product.title | split: '(#2)' | last | append: '(#2)'
                          assign product_title = product.title
                          if product.title == compared_product_title
                            assign product_title = product_title | remove_last: '(#2)'
                          endif
                        %}
                        <a href="{{ product.url }}" data-instant class="product-item-meta__title">{{ product_title }}</a>

                        {% if product.metafields.custom.color_for_collection_pages != blank %}
                          <span class="color--Metafeilds">
                            {{ product.metafields.custom.color_for_collection_pages }}
                          </span>
                        {% endif %}
                        
                        <div class="product-item-meta__price-list-container">
                          <div class="price-list price-list--centered">
                            {%- if product.price < product.compare_at_price -%}
                              <span class="price price--highlight">
                                <span class="visually-hidden">Sale price</span>
                                {%- if settings.currency_code_enabled -%}
                                  {{- product.price | money_with_currency -}}
                                {%- else -%}
                                  {{- product.price | money -}}
                                {%- endif -%}
                              </span>
                              <span class="price price--compare">
                                <span class="visually-hidden">Regular price</span>
                                {%- if settings.currency_code_enabled -%}
                                  {{- product.compare_at_price | money_with_currency -}}
                                {%- else -%}
                                  {{- product.compare_at_price | money -}}
                                {%- endif -%}
                              </span>
                            {%- elsif product.price_varies -%}
                              {%- capture price_min -%}
                                {%- if settings.currency_code_enabled -%}
                                  {{ product.price_min | money_with_currency }}
                                {%- else -%}
                                  {{ product.price_min | money }}
                                {%- endif -%}
                              {%- endcapture -%}
                              <span class="price">
                                <span class="visually-hidden">Sale price</span>
                                From {{ price_min }}
                              </span>
                            {%- else -%}
                              <span class="price">
                                <span class="visually-hidden">Sale price</span>
                                {%- if settings.currency_code_enabled -%}
                                  {{- product.price | money_with_currency -}}
                                {%- else -%}
                                  {{- product.price | money -}}
                                {%- endif -%}
                              </span>
                            {%- endif -%}
                          </div>
                        </div>

                        {%- if settings.show_product_rating -%}
                          <a class="product-item-meta__reviews-badge text--small" href="{{ product.url }}" data-instant>
                            {%- render 'product-rating', product: product -%}
                          </a>
                        {%- endif -%}
                      </div>
                    </div>
                  </product-item>
                </div>
              {%- endfor -%}
            </div>

            {%- if number_of_slides > 1 -%}
              <div class="slider-buttons">
                <button
                  type="button"
                  class="slider-button slider-button--prev"
                  name="previous"
                  aria-label="Previous slide"
                >
                  <span class="svg-wrapper">
                    {{- 'icon-caret.svg' | inline_asset_content -}}
                  </span>
                </button>
                <div class="slider-counter slider-counter--{{ section.settings.pagination_style }}{% if section.settings.pagination_style == 'counter' or section.settings.pagination_style == 'numbers' %} caption{% endif %}">
                  {%- if section.settings.pagination_style == 'counter' -%}
                    <span class="slider-counter--current">1</span>
                    <span aria-hidden="true"> / </span>
                    <span class="visually-hidden">of</span>
                    <span class="slider-counter--total">{{ number_of_slides }}</span>
                  {%- else -%}
                    <div class="slideshow__control-wrapper">
                      {%- for i in (1..number_of_slides) -%}
                        <button
                          class="slider-counter__link slider-counter__link--{{ section.settings.pagination_style }} link"
                          aria-label="Load slide {{ forloop.index }} of {{ forloop.length }}"
                          aria-controls="Slider-{{ section.id }}"
                        >
                          {%- if section.settings.pagination_style == 'numbers' -%}
                            {{ forloop.index -}}
                          {%- else -%}
                            <span class="dot"></span>
                          {%- endif -%}
                        </button>
                      {%- endfor -%}
                    </div>
                  {%- endif -%}
                </div>
                <button
                  type="button"
                  class="slider-button slider-button--next"
                  name="next"
                  aria-label="Next slide"
                >
                  <span class="svg-wrapper">
                    {{- 'icon-caret.svg' | inline_asset_content -}}
                  </span>
                </button>
              </div>
            {%- endif -%}
          </slideshow-component>
          {%- if section.settings.make_collapsible_row -%}
            </details>
          {%- endif -%}
        </div>
      </aside>
    {%- endif -%}
  </product-recommendations>
</section>


{% schema %}
{
  "name": "Complementary Products",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "block_heading",
      "label": "Heading",
      "default": "You may also like"
    },
    {
      "type": "checkbox",
      "id": "make_collapsible_row",
      "label": "Collapsible Row",
      "default": false
    },
    {
      "type": "select",
      "id": "icon",
      "label": "Accordion Icon",
      "options": [
        { "value": "plus", "label": "Plus" },
        { "value": "chevron", "label": "Chevron" }
      ],
      "default": "plus"
    },
    {
      "type": "range",
      "id": "product_list_limit",
      "label": "Product List Limit",
      "min": 2,
      "max": 10,
      "step": 1,
      "default": 4
    },
    {
      "type": "range",
      "id": "products_per_page",
      "label": "Products Per Page",
      "min": 2,
      "max": 6,
      "step": 1,
      "default": 4
    },
    {
      "type": "select",
      "id": "pagination_style",
      "label": "Pagination Style",
      "options": [
        { "value": "dots", "label": "Dots" },
        { "value": "numbers", "label": "Numbers" },
        { "value": "counter", "label": "Counter" }
      ],
      "default": "dots"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "label": "Image Ratio",
      "options": [
        { "value": "portrait", "label": "Portrait" },
        { "value": "square", "label": "Square" }
      ],
      "default": "portrait"
    },
    {
      "type": "checkbox",
      "id": "enable_quick_add",
      "label": "Enable Quick Add",
      "default": false
    }
    ,
    {
      
          "type": "select",
          "id": "picker_type",
          "options": [
            {
              "value": "dropdown",
              "label": "t:sections.main-product.blocks.variant_picker.settings.picker_type.options__1.label"
            },
            {
              "value": "button",
              "label": "t:sections.main-product.blocks.variant_picker.settings.picker_type.options__2.label"
            }
          ],
          "default": "button",
          "label": "t:sections.main-product.blocks.variant_picker.settings.picker_type.label"
        },
        {
          "id": "swatch_shape",
          "label": "t:sections.main-product.blocks.variant_picker.settings.swatch_shape.label",
          "type": "select",
          "info": "t:sections.main-product.blocks.variant_picker.settings.swatch_shape.info",
          "options": [
            {
              "value": "circle",
              "label": "t:sections.main-product.blocks.variant_picker.settings.swatch_shape.options__1.label"
            },
            {
              "value": "square",
              "label": "t:sections.main-product.blocks.variant_picker.settings.swatch_shape.options__2.label"
            },
            {
              "value": "none",
              "label": "t:sections.main-product.blocks.variant_picker.settings.swatch_shape.options__3.label"
            }
          ],
          "default": "circle"
        }
      
    
  ],
  "presets": [
    {
      "name": "Custom Complementary Products"
    }
  ]
}
{% endschema %}

<script>
    class SlideshowComponent extends SliderComponent {
  constructor() {
    super();
    this.sliderControlWrapper = this.querySelector('.slider-buttons');
    this.enableSliderLooping = true;

    if (!this.sliderControlWrapper) return;

    this.sliderFirstItemNode = this.slider.querySelector('.slideshow__slide');
    if (this.sliderItemsToShow.length > 0) this.currentPage = 1;

    this.announcementBarSlider = this.querySelector('.announcement-bar-slider');
    // Value below should match --duration-announcement-bar CSS value
    this.announcerBarAnimationDelay = this.announcementBarSlider ? 250 : 0;

    this.sliderControlLinksArray = Array.from(this.sliderControlWrapper.querySelectorAll('.slider-counter__link'));
    this.sliderControlLinksArray.forEach((link) => link.addEventListener('click', this.linkToSlide.bind(this)));
    this.slider.addEventListener('scroll', this.setSlideVisibility.bind(this));
    this.setSlideVisibility();

    if (this.announcementBarSlider) {
      this.announcementBarArrowButtonWasClicked = false;

      this.reducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
      this.reducedMotion.addEventListener('change', () => {
        if (this.slider.getAttribute('data-autoplay') === 'true') this.setAutoPlay();
      });

      [this.prevButton, this.nextButton].forEach((button) => {
        button.addEventListener(
          'click',
          () => {
            this.announcementBarArrowButtonWasClicked = true;
          },
          { once: true }
        );
      });
    }

    if (this.slider.getAttribute('data-autoplay') === 'true') this.setAutoPlay();
  }

  setAutoPlay() {
    this.autoplaySpeed = this.slider.dataset.speed * 1000;
    this.addEventListener('mouseover', this.focusInHandling.bind(this));
    this.addEventListener('mouseleave', this.focusOutHandling.bind(this));
    this.addEventListener('focusin', this.focusInHandling.bind(this));
    this.addEventListener('focusout', this.focusOutHandling.bind(this));

    if (this.querySelector('.slideshow__autoplay')) {
      this.sliderAutoplayButton = this.querySelector('.slideshow__autoplay');
      this.sliderAutoplayButton.addEventListener('click', this.autoPlayToggle.bind(this));
      this.autoplayButtonIsSetToPlay = true;
      this.play();
    } else {
      this.reducedMotion.matches || this.announcementBarArrowButtonWasClicked ? this.pause() : this.play();
    }
  }

  onButtonClick(event) {
    super.onButtonClick(event);
    this.wasClicked = true;

    const isFirstSlide = this.currentPage === 1;
    const isLastSlide = this.currentPage === this.sliderItemsToShow.length;

    if (!isFirstSlide && !isLastSlide) {
      this.applyAnimationToAnnouncementBar(event.currentTarget.name);
      return;
    }

    if (isFirstSlide && event.currentTarget.name === 'previous') {
      this.slideScrollPosition =
        this.slider.scrollLeft + this.sliderFirstItemNode.clientWidth * this.sliderItemsToShow.length;
    } else if (isLastSlide && event.currentTarget.name === 'next') {
      this.slideScrollPosition = 0;
    }

    this.setSlidePosition(this.slideScrollPosition);

    this.applyAnimationToAnnouncementBar(event.currentTarget.name);
  }

  setSlidePosition(position) {
    if (this.setPositionTimeout) clearTimeout(this.setPositionTimeout);
    this.setPositionTimeout = setTimeout(() => {
      this.slider.scrollTo({
        left: position,
      });
    }, this.announcerBarAnimationDelay);
  }

  update() {
    super.update();
    this.sliderControlButtons = this.querySelectorAll('.slider-counter__link');
    this.prevButton.removeAttribute('disabled');

    if (!this.sliderControlButtons.length) return;

    this.sliderControlButtons.forEach((link) => {
      link.classList.remove('slider-counter__link--active');
      link.removeAttribute('aria-current');
    });
    this.sliderControlButtons[this.currentPage - 1].classList.add('slider-counter__link--active');
    this.sliderControlButtons[this.currentPage - 1].setAttribute('aria-current', true);
  }

  autoPlayToggle() {
    this.togglePlayButtonState(this.autoplayButtonIsSetToPlay);
    this.autoplayButtonIsSetToPlay ? this.pause() : this.play();
    this.autoplayButtonIsSetToPlay = !this.autoplayButtonIsSetToPlay;
  }

  focusOutHandling(event) {
    if (this.sliderAutoplayButton) {
      const focusedOnAutoplayButton =
        event.target === this.sliderAutoplayButton || this.sliderAutoplayButton.contains(event.target);
      if (!this.autoplayButtonIsSetToPlay || focusedOnAutoplayButton) return;
      this.play();
    } else if (!this.reducedMotion.matches && !this.announcementBarArrowButtonWasClicked) {
      this.play();
    }
  }

  focusInHandling(event) {
    if (this.sliderAutoplayButton) {
      const focusedOnAutoplayButton =
        event.target === this.sliderAutoplayButton || this.sliderAutoplayButton.contains(event.target);
      if (focusedOnAutoplayButton && this.autoplayButtonIsSetToPlay) {
        this.play();
      } else if (this.autoplayButtonIsSetToPlay) {
        this.pause();
      }
    } else if (this.announcementBarSlider.contains(event.target)) {
      this.pause();
    }
  }

  play() {
    this.slider.setAttribute('aria-live', 'off');
    clearInterval(this.autoplay);
    this.autoplay = setInterval(this.autoRotateSlides.bind(this), this.autoplaySpeed);
  }

  pause() {
    this.slider.setAttribute('aria-live', 'polite');
    clearInterval(this.autoplay);
  }

  togglePlayButtonState(pauseAutoplay) {
    if (pauseAutoplay) {
      this.sliderAutoplayButton.classList.add('slideshow__autoplay--paused');
      this.sliderAutoplayButton.setAttribute('aria-label', window.accessibilityStrings.playSlideshow);
    } else {
      this.sliderAutoplayButton.classList.remove('slideshow__autoplay--paused');
      this.sliderAutoplayButton.setAttribute('aria-label', window.accessibilityStrings.pauseSlideshow);
    }
  }

  autoRotateSlides() {
    const slideScrollPosition =
      this.currentPage === this.sliderItems.length ? 0 : this.slider.scrollLeft + this.sliderItemOffset;

    this.setSlidePosition(slideScrollPosition);
    this.applyAnimationToAnnouncementBar();
  }

  setSlideVisibility(event) {
    this.sliderItemsToShow.forEach((item, index) => {
      const linkElements = item.querySelectorAll('a');
      if (index === this.currentPage - 1) {
        if (linkElements.length)
          linkElements.forEach((button) => {
            button.removeAttribute('tabindex');
          });
        item.setAttribute('aria-hidden', 'false');
        item.removeAttribute('tabindex');
      } else {
        if (linkElements.length)
          linkElements.forEach((button) => {
            button.setAttribute('tabindex', '-1');
          });
        item.setAttribute('aria-hidden', 'true');
        item.setAttribute('tabindex', '-1');
      }
    });
    this.wasClicked = false;
  }

  applyAnimationToAnnouncementBar(button = 'next') {
    if (!this.announcementBarSlider) return;

    const itemsCount = this.sliderItems.length;
    const increment = button === 'next' ? 1 : -1;

    const currentIndex = this.currentPage - 1;
    let nextIndex = (currentIndex + increment) % itemsCount;
    nextIndex = nextIndex === -1 ? itemsCount - 1 : nextIndex;

    const nextSlide = this.sliderItems[nextIndex];
    const currentSlide = this.sliderItems[currentIndex];

    const animationClassIn = 'announcement-bar-slider--fade-in';
    const animationClassOut = 'announcement-bar-slider--fade-out';

    const isFirstSlide = currentIndex === 0;
    const isLastSlide = currentIndex === itemsCount - 1;

    const shouldMoveNext = (button === 'next' && !isLastSlide) || (button === 'previous' && isFirstSlide);
    const direction = shouldMoveNext ? 'next' : 'previous';

    currentSlide.classList.add(`${animationClassOut}-${direction}`);
    nextSlide.classList.add(`${animationClassIn}-${direction}`);

    setTimeout(() => {
      currentSlide.classList.remove(`${animationClassOut}-${direction}`);
      nextSlide.classList.remove(`${animationClassIn}-${direction}`);
    }, this.announcerBarAnimationDelay * 2);
  }

  linkToSlide(event) {
    event.preventDefault();
    const slideScrollPosition =
      this.slider.scrollLeft +
      this.sliderFirstItemNode.clientWidth *
        (this.sliderControlLinksArray.indexOf(event.currentTarget) + 1 - this.currentPage);
    this.slider.scrollTo({
      left: slideScrollPosition,
    });
  }
}

customElements.define('slideshow-component', SlideshowComponent);
    
class ProductRecommendations extends HTMLElement {
  observer = undefined;

  constructor() {
    super();
  }

  connectedCallback() {
    this.initializeRecommendations(this.dataset.productId);
  }

  initializeRecommendations(productId) {
    this.observer?.unobserve(this);
    this.observer = new IntersectionObserver(
      (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);
        this.loadRecommendations(productId);
      },
      { rootMargin: '0px 0px 400px 0px' }
    );
    this.observer.observe(this);
  }

  loadRecommendations(productId) {
    fetch(`${this.dataset.url}&product_id=${productId}&section_id=${this.dataset.sectionId}`)
      .then((response) => response.text())
      .then((text) => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('product-recommendations');

        if (recommendations?.innerHTML.trim().length) {
          this.innerHTML = recommendations.innerHTML;
        }

        if (!this.querySelector('slideshow-component') && this.classList.contains('complementary-products')) {
          this.remove();
        }

        if (html.querySelector('.grid__item')) {
          this.classList.add('product-recommendations--loaded');
        }
      })
      .catch((e) => {
        console.error(e);
      });
  }
}

customElements.define('product-recommendations', ProductRecommendations);
</script>